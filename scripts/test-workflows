#!/usr/bin/env bash
# gem-ci Workflow Tests Runner
# Run all validation tests in .github/workflows/tests/

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
TESTS_DIR=".github/workflows/tests"
SECRETS_FILE=".secrets"
RUNNER_IMAGE="catthehacker/ubuntu:act-latest"

# Display usage information
usage() {
    cat << EOF
${BLUE}gem-ci Workflow Tests Runner${NC}

Usage: ./scripts/test-workflows [OPTIONS]

${YELLOW}Options:${NC}
  -h, --help        Show this help message
  -v, --verbose     Enable verbose output
  -l, --list        List available test workflows
  -t, --test TEST   Run specific test workflow
  -s, --setup       Check setup and requirements
  --no-secrets      Run without secrets file
  --runner IMAGE    Use specific runner image

${YELLOW}Available Tests:${NC}
  github-app        Test GitHub App authentication
  labels-sync       Test labels synchronization
  slack-integration Test Slack integration
  repository-rules  Test repository rulesets

${YELLOW}Examples:${NC}
  ./scripts/test-workflows                           # Run all tests
  ./scripts/test-workflows -t github-app             # Run specific test
  ./scripts/test-workflows --list                    # List available tests
  ./scripts/test-workflows --setup                   # Check setup
  ./scripts/test-workflows -v                        # Verbose output

${YELLOW}Setup:${NC}
  1. Copy secrets: cp .secrets.example .secrets
  2. Edit secrets: nano .secrets
  3. Run tests: ./scripts/test-workflows

EOF
}

# Check if act is installed
check_act() {
    if ! command -v act &> /dev/null; then
        echo -e "${RED}Error: 'act' is not installed${NC}"
        echo "Install with: brew install act"
        echo "Or see: https://nektosact.com/installation/"
        exit 1
    fi
}

# Check if Docker is running
check_docker() {
    if ! docker info &> /dev/null; then
        echo -e "${RED}Error: Docker is not running${NC}"
        echo "Please start Docker and try again"
        exit 1
    fi
}

# Check setup requirements
check_setup() {
    echo -e "${BLUE}Checking setup requirements...${NC}"
    
    # Check act
    if command -v act &> /dev/null; then
        echo -e "${GREEN}✓${NC} act is installed ($(act --version))"
    else
        echo -e "${RED}✗${NC} act is not installed"
        return 1
    fi
    
    # Check Docker
    if docker info &> /dev/null; then
        echo -e "${GREEN}✓${NC} Docker is running"
    else
        echo -e "${RED}✗${NC} Docker is not running"
        return 1
    fi
    
    # Check tests directory
    if [[ -d "$TESTS_DIR" ]]; then
        local test_count=$(find "$TESTS_DIR" -name "*.yml" | wc -l)
        echo -e "${GREEN}✓${NC} Found $test_count test workflow files in $TESTS_DIR"
    else
        echo -e "${RED}✗${NC} Tests directory not found: $TESTS_DIR"
        return 1
    fi
    
    # Check secrets file
    if [[ -f "$SECRETS_FILE" ]]; then
        echo -e "${GREEN}✓${NC} Secrets file exists ($SECRETS_FILE)"
    else
        echo -e "${YELLOW}!${NC} Secrets file not found ($SECRETS_FILE)"
        echo "  Copy example: cp .secrets.example .secrets"
    fi
    
    echo -e "${GREEN}Setup check complete!${NC}"
}

# List available test workflows
list_tests() {
    echo -e "${BLUE}Available test workflows:${NC}"
    
    if [[ ! -d "$TESTS_DIR" ]]; then
        echo -e "${RED}Error: Tests directory not found: $TESTS_DIR${NC}"
        exit 1
    fi
    
    local tests=()
    while IFS= read -r -d '' file; do
        local basename=$(basename "$file" .yml)
        local name=$(echo "$basename" | sed 's/validate-//' | sed 's/-/ /g')
        tests+=("$basename:$name")
    done < <(find "$TESTS_DIR" -name "validate-*.yml" -print0 | sort -z)
    
    if [[ ${#tests[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No test workflows found in $TESTS_DIR${NC}"
        return
    fi
    
    for test in "${tests[@]}"; do
        IFS=':' read -r basename name <<< "$test"
        echo -e "  ${GREEN}$basename${NC} - $name"
    done
}

# Build act command with common options
build_act_command() {
    local cmd="act"
    
    # Add runner image
    cmd="$cmd -P ubuntu-latest=$RUNNER_IMAGE"
    
    # Add secrets file if it exists and not disabled
    if [[ "$USE_SECRETS" == "true" && -f "$SECRETS_FILE" ]]; then
        cmd="$cmd --secret-file $SECRETS_FILE"
    fi
    
    # Add verbose flag if requested
    if [[ "$VERBOSE" == "true" ]]; then
        cmd="$cmd -v"
    fi
    
    echo "$cmd"
}

# Run specific test workflow
run_test() {
    local test_name="$1"
    local workflow_file="$TESTS_DIR/validate-$test_name.yml"
    
    if [[ ! -f "$workflow_file" ]]; then
        echo -e "${RED}Error: Test workflow not found: $workflow_file${NC}"
        echo "Available tests:"
        list_tests
        exit 1
    fi
    
    echo -e "${BLUE}Running test: $test_name${NC}"
    local cmd=$(build_act_command)
    cmd="$cmd -W $workflow_file"
    
    echo -e "${YELLOW}Command: $cmd${NC}"
    
    if eval "$cmd"; then
        echo -e "${GREEN}✓ Test passed: $test_name${NC}"
        return 0
    else
        echo -e "${RED}✗ Test failed: $test_name${NC}"
        return 1
    fi
}

# Run all test workflows
run_all_tests() {
    echo -e "${BLUE}Running all workflow tests...${NC}"
    
    if [[ ! -d "$TESTS_DIR" ]]; then
        echo -e "${RED}Error: Tests directory not found: $TESTS_DIR${NC}"
        exit 1
    fi
    
    local tests=()
    while IFS= read -r -d '' file; do
        local basename=$(basename "$file" .yml)
        local test_name=$(echo "$basename" | sed 's/validate-//')
        tests+=("$test_name")
    done < <(find "$TESTS_DIR" -name "validate-*.yml" -print0 | sort -z)
    
    if [[ ${#tests[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No test workflows found in $TESTS_DIR${NC}"
        exit 0
    fi
    
    local passed=0
    local failed=0
    local failed_tests=()
    
    echo -e "${BLUE}Found ${#tests[@]} test workflows${NC}"
    
    for test in "${tests[@]}"; do
        echo -e "\n${BLUE}Running test: $test${NC}"
        
        if run_test "$test"; then
            ((passed++))
        else
            ((failed++))
            failed_tests+=("$test")
        fi
    done
    
    # Summary
    echo -e "\n${BLUE}Test Results Summary:${NC}"
    echo -e "${GREEN}✓ Passed: $passed${NC}"
    echo -e "${RED}✗ Failed: $failed${NC}"
    echo -e "Total: ${#tests[@]}"
    
    if [[ $failed -gt 0 ]]; then
        echo -e "\n${RED}Failed tests:${NC}"
        for test in "${failed_tests[@]}"; do
            echo -e "  - $test"
        done
        exit 1
    else
        echo -e "\n${GREEN}All tests passed!${NC}"
    fi
}

# Main function
main() {
    # Default values
    VERBOSE="false"
    USE_SECRETS="true"
    SPECIFIC_TEST=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE="true"
                shift
                ;;
            -l|--list)
                list_tests
                exit 0
                ;;
            -t|--test)
                SPECIFIC_TEST="$2"
                shift 2
                ;;
            -s|--setup)
                check_setup
                exit 0
                ;;
            --no-secrets)
                USE_SECRETS="false"
                shift
                ;;
            --runner)
                RUNNER_IMAGE="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    # Check requirements
    check_act
    check_docker
    
    # Run specific test or all tests
    if [[ -n "$SPECIFIC_TEST" ]]; then
        run_test "$SPECIFIC_TEST"
    else
        run_all_tests
    fi
}

# Run main function
main "$@"