#!/usr/bin/env bash
# gem-ci Local Testing Script
# Test GitHub Actions workflows locally using act

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SECRETS_FILE=".secrets"
ENV_FILE=".env.test"
RUNNER_IMAGE="catthehacker/ubuntu:act-latest"

# Display usage information
usage() {
    cat << EOF
${BLUE}gem-ci Local Testing Script${NC}

Usage: ./scripts/test-local [EVENT] [OPTIONS]

${YELLOW}Events:${NC}
  push              Test push workflows (CI, Security, Quality) [default]
  pull_request      Test pull request workflows  
  schedule          Test scheduled workflows (Community, Ecosystem, Monitoring)
  workflow_dispatch Test manual workflow dispatch
  all               Test all main workflows

${YELLOW}Workflow-specific tests:${NC}
  ci                Test CI workflow (02-ci.yml)
  security          Test Security workflow (03-security.yml)
  quality           Test Quality workflow (04-quality.yml)
  community         Test Community workflow (05-community.yml)
  release           Test Release workflow (06-release.yml) - CAREFUL!
  ecosystem         Test Ecosystem workflow (07-ecosystem.yml)
  monitoring        Test Monitoring workflow (08-monitoring.yml)
  bot-commands      Test Bot Commands workflow (09-bot-commands.yml)

${YELLOW}Options:${NC}
  -h, --help        Show this help message
  -v, --verbose     Enable verbose output
  -l, --list        List available workflows and jobs
  -d, --dry-run     Dry run mode (for release testing)
  -j, --job JOB     Run specific job only
  -s, --setup       Check setup and requirements
  --no-secrets      Run without secrets file
  --runner IMAGE    Use specific runner image

${YELLOW}Examples:${NC}
  ./scripts/test-local                    # Test push event (default)
  ./scripts/test-local pull_request       # Test PR workflows
  ./scripts/test-local ci                 # Test CI workflow only
  ./scripts/test-local release --dry-run  # Safely test release workflow
  ./scripts/test-local -j test-ruby       # Run specific job
  ./scripts/test-local --list             # List available workflows
  ./scripts/test-local --setup            # Check setup

${YELLOW}Setup:${NC}
  1. Copy example files: cp .secrets.example .secrets && cp .env.example .env.test
  2. Edit secrets: nano .secrets
  3. Edit environment: nano .env.test
  4. Run tests: ./scripts/test-local

EOF
}

# Check if act is installed
check_act() {
    if ! command -v act &> /dev/null; then
        echo -e "${RED}Error: 'act' is not installed${NC}"
        echo "Install with: brew install act"
        echo "Or see: https://nektosact.com/installation/"
        exit 1
    fi
}

# Check if Docker is running
check_docker() {
    if ! docker info &> /dev/null; then
        echo -e "${RED}Error: Docker is not running${NC}"
        echo "Please start Docker and try again"
        exit 1
    fi
}

# Check setup requirements
check_setup() {
    echo -e "${BLUE}Checking setup requirements...${NC}"
    
    # Check act
    if command -v act &> /dev/null; then
        echo -e "${GREEN}✓${NC} act is installed ($(act --version))"
    else
        echo -e "${RED}✗${NC} act is not installed"
        return 1
    fi
    
    # Check Docker
    if docker info &> /dev/null; then
        echo -e "${GREEN}✓${NC} Docker is running"
    else
        echo -e "${RED}✗${NC} Docker is not running"
        return 1
    fi
    
    # Check secrets file
    if [[ -f "$SECRETS_FILE" ]]; then
        echo -e "${GREEN}✓${NC} Secrets file exists ($SECRETS_FILE)"
    else
        echo -e "${YELLOW}!${NC} Secrets file not found ($SECRETS_FILE)"
        echo "  Copy example: cp .secrets.example .secrets"
    fi
    
    # Check environment file
    if [[ -f "$ENV_FILE" ]]; then
        echo -e "${GREEN}✓${NC} Environment file exists ($ENV_FILE)"
    else
        echo -e "${YELLOW}!${NC} Environment file not found ($ENV_FILE)"
        echo "  Copy example: cp .env.example .env.test"
    fi
    
    # Check workflows directory
    if [[ -d ".github/workflows" ]]; then
        local workflow_count=$(find .github/workflows -name "*.yml" -not -path "*/tests/*" -not -path "*/shared/*" | wc -l)
        echo -e "${GREEN}✓${NC} Found $workflow_count workflow files"
    else
        echo -e "${RED}✗${NC} .github/workflows directory not found"
        return 1
    fi
    
    echo -e "${GREEN}Setup check complete!${NC}"
}

# Build act command with common options
build_act_command() {
    local cmd="act"
    
    # Add runner image
    cmd="$cmd -P ubuntu-latest=$RUNNER_IMAGE"
    
    # Add secrets file if it exists and not disabled
    if [[ "$USE_SECRETS" == "true" && -f "$SECRETS_FILE" ]]; then
        cmd="$cmd --secret-file $SECRETS_FILE"
    fi
    
    # Add environment file if it exists
    if [[ -f "$ENV_FILE" ]]; then
        cmd="$cmd --env-file $ENV_FILE"
    fi
    
    # Add verbose flag if requested
    if [[ "$VERBOSE" == "true" ]]; then
        cmd="$cmd -v"
    fi
    
    # Add dry-run for release testing
    if [[ "$DRY_RUN" == "true" ]]; then
        cmd="$cmd --env DRY_RUN=true --env SKIP_PUBLISH=true"
    fi
    
    # Add specific job if requested
    if [[ -n "$JOB" ]]; then
        cmd="$cmd -j $JOB"
    fi
    
    echo "$cmd"
}

# Run specific workflow file
run_workflow() {
    local workflow_file="$1"
    local workflow_name="$2"
    
    if [[ ! -f "$workflow_file" ]]; then
        echo -e "${RED}Error: Workflow file not found: $workflow_file${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}Testing $workflow_name workflow...${NC}"
    local cmd=$(build_act_command)
    cmd="$cmd -W $workflow_file"
    
    echo -e "${YELLOW}Running: $cmd${NC}"
    eval "$cmd"
}

# Main function
main() {
    # Default values
    EVENT="push"
    VERBOSE="false"
    DRY_RUN="false"
    USE_SECRETS="true"
    JOB=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE="true"
                shift
                ;;
            -l|--list)
                check_act
                act -l
                exit 0
                ;;
            -d|--dry-run)
                DRY_RUN="true"
                shift
                ;;
            -j|--job)
                JOB="$2"
                shift 2
                ;;
            -s|--setup)
                check_setup
                exit 0
                ;;
            --no-secrets)
                USE_SECRETS="false"
                shift
                ;;
            --runner)
                RUNNER_IMAGE="$2"
                shift 2
                ;;
            push|pull_request|schedule|workflow_dispatch|all)
                EVENT="$1"
                shift
                ;;
            ci)
                run_workflow ".github/workflows/02-ci.yml" "CI"
                exit 0
                ;;
            security)
                run_workflow ".github/workflows/03-security.yml" "Security"
                exit 0
                ;;
            quality)
                run_workflow ".github/workflows/04-quality.yml" "Quality"
                exit 0
                ;;
            community)
                run_workflow ".github/workflows/05-community.yml" "Community"
                exit 0
                ;;
            release)
                DRY_RUN="true"  # Force dry-run for release
                run_workflow ".github/workflows/06-release.yml" "Release"
                exit 0
                ;;
            ecosystem)
                run_workflow ".github/workflows/07-ecosystem.yml" "Ecosystem"
                exit 0
                ;;
            monitoring)
                run_workflow ".github/workflows/08-monitoring.yml" "Monitoring"
                exit 0
                ;;
            bot-commands)
                run_workflow ".github/workflows/09-bot-commands.yml" "Bot Commands"
                exit 0
                ;;
            *)
                echo -e "${RED}Error: Unknown option or event: $1${NC}"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    # Check requirements
    check_act
    check_docker
    
    # Build and run act command
    local cmd=$(build_act_command)
    
    if [[ "$EVENT" == "all" ]]; then
        echo -e "${BLUE}Testing all main workflows...${NC}"
        echo -e "${YELLOW}Running push, pull_request, and schedule events${NC}"
        
        # Test push workflows
        echo -e "\n${BLUE}1. Testing push workflows (CI, Security, Quality)...${NC}"
        eval "$cmd push"
        
        # Test PR workflows  
        echo -e "\n${BLUE}2. Testing pull request workflows...${NC}"
        eval "$cmd pull_request"
        
        # Test scheduled workflows
        echo -e "\n${BLUE}3. Testing scheduled workflows (Community, Ecosystem, Monitoring)...${NC}"
        eval "$cmd schedule"
        
    else
        echo -e "${BLUE}Testing $EVENT workflows...${NC}"
        cmd="$cmd $EVENT"
        echo -e "${YELLOW}Running: $cmd${NC}"
        eval "$cmd"
    fi
    
    echo -e "${GREEN}Testing complete!${NC}"
}

# Run main function
main "$@"