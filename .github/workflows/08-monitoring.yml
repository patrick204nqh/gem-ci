# üìã Workflow: Performance & Health Monitoring
# üéØ Purpose: Workflow metrics, repository health, basic monitoring
# üîÑ Triggers: Push/PR to main/master, daily at 4 AM UTC
# üì¶ Outputs: Performance metrics, health reports
# ‚è±Ô∏è Duration: ~3-6 minutes
# üîó Dependencies: GitHub API access

name: 08 - Monitoring

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run comprehensive monitoring weekly at 4 AM UTC on Mondays
    - cron: '0 4 * * 1'
  workflow_dispatch:

env:
  RUBY_VERSION: "3.3"
  NODE_VERSION: "20"
  CACHE_VERSION: "v1"
  DEFAULT_TIMEOUT: "300"
  API_RETRY_COUNT: "3"

jobs:
  workflow-metrics:
    name: üìà Workflow Performance Metrics
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      issues: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìä Analyze workflow performance
        uses: actions/github-script@v7
        with:
          script: |
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            
            // Get workflow runs for the last 30 days
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            let performanceReport = `## üìä Workflow Performance Analysis
            **Period**: Last 30 days
            **Generated**: ${new Date().toISOString().split('T')[0]}
            
            ### üöÄ Workflow Statistics
            `;
            
            let totalRuns = 0;
            let successfulRuns = 0;
            let failedRuns = 0;
            let totalDuration = 0;
            let workflowStats = [];
            
            for (const workflow of workflows.workflows) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                created: `>${thirtyDaysAgo.toISOString()}`,
                per_page: 100
              });
              
              const workflowSuccessful = runs.workflow_runs.filter(run => run.conclusion === 'success').length;
              const workflowFailed = runs.workflow_runs.filter(run => run.conclusion === 'failure').length;
              const workflowTotal = runs.workflow_runs.length;
              
              if (workflowTotal > 0) {
                const avgDuration = runs.workflow_runs
                  .filter(run => run.created_at && run.updated_at)
                  .reduce((sum, run) => {
                    const duration = new Date(run.updated_at) - new Date(run.created_at);
                    return sum + duration;
                  }, 0) / workflowTotal;
                
                workflowStats.push({
                  name: workflow.name,
                  total: workflowTotal,
                  successful: workflowSuccessful,
                  failed: workflowFailed,
                  avgDuration: Math.round(avgDuration / 1000 / 60) // minutes
                });
                
                totalRuns += workflowTotal;
                successfulRuns += workflowSuccessful;
                failedRuns += workflowFailed;
                totalDuration += avgDuration;
              }
            }
            
            // Calculate overall metrics
            const successRate = totalRuns > 0 ? Math.round((successfulRuns / totalRuns) * 100) : 0;
            const avgWorkflowDuration = workflowStats.length > 0 ? Math.round(totalDuration / workflowStats.length / 1000 / 60) : 0;
            
            performanceReport += `
            **üìà Overall Performance**
            - **Total Runs**: ${totalRuns}
            - **Success Rate**: ${successRate}%
            - **Failed Runs**: ${failedRuns}
            - **Average Duration**: ${avgWorkflowDuration} minutes
            
            ### üîç Workflow Breakdown
            `;
            
            workflowStats
              .sort((a, b) => b.total - a.total)
              .slice(0, 10)
              .forEach(stat => {
                const successRate = stat.total > 0 ? Math.round((stat.successful / stat.total) * 100) : 0;
                const statusEmoji = successRate >= 95 ? 'üü¢' : successRate >= 80 ? 'üü°' : 'üî¥';
                
                performanceReport += `
            **${statusEmoji} ${stat.name}**
            - Runs: ${stat.total} | Success: ${successRate}% | Avg Duration: ${stat.avgDuration}min`;
              });
            
            performanceReport += `
            
            ### üéØ Performance Insights
            ${successRate >= 95 ? 'üéâ **Excellent**: Workflow reliability is outstanding!' : 
              successRate >= 80 ? '‚ö†Ô∏è **Good**: Some workflows may need optimization.' : 
              'üö® **Attention**: Multiple workflows showing reliability issues.'}
            
            ${avgWorkflowDuration <= 10 ? '‚ö° **Fast**: Workflows are completing quickly.' :
              avgWorkflowDuration <= 20 ? '‚è∞ **Moderate**: Workflow duration is acceptable.' :
              'üêå **Slow**: Consider optimizing workflow performance.'}
            
            ### üìä Recommendations
            ${failedRuns > 10 ? '- Review failed workflows for common patterns' : '‚úÖ Low failure rate'}
            ${avgWorkflowDuration > 15 ? '- Consider parallelizing slow workflows' : '‚úÖ Good performance'}
            ${successRate < 90 ? '- Investigate reliability issues in failing workflows' : '‚úÖ High reliability'}
            
            *Generated by advanced monitoring workflow* ü§ñ
            `;
            
            console.log(performanceReport);
            
            // Output metrics for monitoring
            console.log(`üìä WORKFLOW_SUCCESS_RATE: ${successRate}%`);
            console.log(`üìä WORKFLOW_AVG_DURATION: ${avgWorkflowDuration}min`);

  action-usage-analysis:
    name: üîç Basic Action Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Basic workflow monitoring
        run: |
          echo "üìä Monitoring workflow health..."
          workflow_count=$(find .github/workflows -name "*.yml" | wc -l)
          echo "‚úÖ Found $workflow_count workflow files"
          echo "ü§ñ Basic monitoring complete"

  repository-health:
    name: üè• Repository Health Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      pull-requests: read
      actions: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üè• Basic repository health check
        run: |
          echo "üè• Checking repository health..."
          echo "‚úÖ Repository is accessible"
          echo "ü§ñ Basic health check complete"

  monitoring-summary:
    name: üìã Basic Monitoring Summary
    runs-on: ubuntu-latest
    needs: [workflow-metrics, action-usage-analysis, repository-health]
    if: always()
    permissions:
      contents: read
    
    steps:
      - name: üìã Basic summary
        run: |
          echo "üìã Monitoring summary complete"
          echo "‚úÖ All monitoring jobs finished"
          echo "ü§ñ Basic monitoring workflow complete"
