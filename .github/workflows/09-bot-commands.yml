# 📋 Workflow: Bot Command Handler
# 🎯 Purpose: Handle basic bot commands from issue/PR comments
# 🔄 Triggers: Issue/PR comments with /gem-ci commands
# 📦 Outputs: Simple status responses
# ⏱️ Duration: ~30 seconds
# 🔗 Dependencies: GitHub App token

name: 09 - Bot Commands

on:
  issue_comment:
    types: [created]

env:
  RUBY_VERSION: "3.3"

jobs:
  bot-command:
    name: 🤖 Bot Command
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/gem-ci')
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔑 Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 👀 React to command
        uses: ./.github/actions/add-reaction
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          reaction-type: 'eyes'
          target-type: 'comment'
          comment-id: ${{ github.event.comment.id }}

      - name: 🤖 Handle command
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const comment = context.payload.comment.body.toLowerCase().trim();
            const isPR = !!context.payload.issue.pull_request;
            const issueNumber = context.payload.issue.number;
            const author = context.payload.comment.user.login;
            
            console.log(`Command: "${comment}" by @${author} on ${isPR ? 'PR' : 'Issue'} #${issueNumber}`);
            
            if (comment.includes('/gem-ci status')) {
              let response = `## 📊 Status\n\n`;
              
              if (isPR) {
                response += `✅ **Pull Request #${issueNumber}**\n`;
                response += `🔍 Checks will show here when workflows run\n`;
                response += `📝 Use this command to get quick PR status\n`;
              } else {
                response += `📋 **Issue #${issueNumber}**\n`;
                response += `💡 For detailed status, try this command on a Pull Request\n`;
                response += `🚀 Bot is working correctly!\n`;
              }
              
              response += `\n*Requested by @${author}*`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: response
              });
              
              console.log('✅ Status command handled');
              return;
            }
            
            // Unknown command
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `❌ Unknown command, @${author}. Try \`/gem-ci status\` to test the bot.`
            });
            
            console.log('❌ Unknown command');

      - name: 🚀 Success reaction
        if: contains(github.event.comment.body, '/gem-ci status')
        uses: ./.github/actions/add-reaction
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          reaction-type: 'rocket'
          target-type: 'comment'
          comment-id: ${{ github.event.comment.id }}

      - name: 😕 Confused reaction
        if: ${{ !contains(github.event.comment.body, '/gem-ci status') }}
        uses: ./.github/actions/add-reaction
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          reaction-type: 'confused'
          target-type: 'comment'
          comment-id: ${{ github.event.comment.id }}