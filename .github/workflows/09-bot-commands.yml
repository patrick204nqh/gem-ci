# üìã Workflow: Bot Command Handler
# üéØ Purpose: Handle bot commands from PR/issue comments
# üîÑ Triggers: Issue comments
# üì¶ Outputs: Automated actions based on commands
# ‚è±Ô∏è Duration: ~1-3 minutes
# üîó Dependencies: GitHub App token

name: 09 - Bot Commands

on:
  issue_comment:
    types: [created]

env:
  RUBY_VERSION: "3.3"
  NODE_VERSION: "20"
  CACHE_VERSION: "v1"

jobs:
  parse-command:
    name: ü§ñ Parse Bot Command
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request &&
      (startsWith(github.event.comment.body, '/gem-ci') || contains(github.event.comment.body, '/gem-ci'))
    permissions:
      contents: write
      pull-requests: write
      issues: write
    outputs:
      command: ${{ steps.parse.outputs.command }}
      action: ${{ steps.parse.outputs.action }}
      from_version: ${{ steps.parse.outputs.from_version }}
      to_version: ${{ steps.parse.outputs.to_version }}
      valid_command: ${{ steps.parse.outputs.valid_command }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîë Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: üîç Parse command
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const comment = context.payload.comment.body.toLowerCase();
            console.log('Comment body:', comment);
            
            // Check for slash command
            if (!comment.includes('/gem-ci')) {
              console.log('No /gem-ci command found');
              core.setOutput('valid_command', 'false');
              return;
            }
            
            // Parse different command types
            let command = '';
            let action = '';
            let fromVersion = '';
            let toVersion = '';
            let validCommand = 'false';
            
            // Command: /gem-ci revise release [from] to [to]
            const reviseMatch = comment.match(/\/gem-ci\s+revise\s+release\s+(\w+)\s+to\s+(\w+)/);
            if (reviseMatch) {
              command = 'revise-release';
              action = 'revise';
              fromVersion = reviseMatch[1];
              toVersion = reviseMatch[2];
              validCommand = 'true';
              console.log(`Parsed revise command: ${fromVersion} -> ${toVersion}`);
            }
            
            // Command: /gem-ci create release [type]
            const createMatch = comment.match(/\/gem-ci\s+create\s+release\s+(\w+)/);
            if (createMatch) {
              command = 'create-release';
              action = 'create';
              toVersion = createMatch[1];
              validCommand = 'true';
              console.log(`Parsed create command: ${toVersion}`);
            }
            
            // Command: /gem-ci cancel release
            if (comment.includes('/gem-ci cancel release')) {
              command = 'cancel-release';
              action = 'cancel';
              validCommand = 'true';
              console.log('Parsed cancel command');
            }
            
            // Command: /gem-ci help
            if (comment.includes('/gem-ci help')) {
              command = 'help';
              action = 'help';
              validCommand = 'true';
              console.log('Parsed help command');
            }
            
            // Set outputs
            core.setOutput('command', command);
            core.setOutput('action', action);
            core.setOutput('from_version', fromVersion);
            core.setOutput('to_version', toVersion);
            core.setOutput('valid_command', validCommand);
            
            // React to comment to show it was processed
            if (validCommand === 'true') {
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });
            }

  revise-release:
    name: üîÑ Revise Release Type
    runs-on: ubuntu-latest
    needs: parse-command
    if: |
      needs.parse-command.outputs.valid_command == 'true' &&
      needs.parse-command.outputs.command == 'revise-release'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîë Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: üîÑ Revise release type
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const fromVersion = '${{ needs.parse-command.outputs.from_version }}';
            const toVersion = '${{ needs.parse-command.outputs.to_version }}';
            
            console.log(`Revising release from ${fromVersion} to ${toVersion}`);
            
            // Get current open release PRs
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:release-please--branches--master--components--gem-ci`
            });
            
            if (prs.length === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå No open release PR found to revise.`
              });
              return;
            }
            
            const releasePR = prs[0];
            console.log(`Found release PR: #${releasePR.number}`);
            
            // Validate version types
            const validTypes = ['patch', 'minor', 'major'];
            if (!validTypes.includes(fromVersion) || !validTypes.includes(toVersion)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå Invalid version types. Use: patch, minor, or major`
              });
              return;
            }
            
            // Update the release PR with manual override
            const newBody = releasePR.body + `\n\n---\nü§ñ **Release type manually revised**: ${fromVersion} ‚Üí ${toVersion}\n\nRequested by: @${context.payload.comment.user.login}`;
            
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: releasePR.number,
              body: newBody
            });
            
            // Add comment to original issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚úÖ Release type revised from **${fromVersion}** to **${toVersion}**!\n\nUpdated release PR: #${releasePR.number}\n\n*Note: The actual version calculation still depends on conventional commits. This is a documentation update.*`
            });
            
            // React with success
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            });

  help-command:
    name: üìö Show Help
    runs-on: ubuntu-latest
    needs: parse-command
    if: needs.parse-command.outputs.command == 'help'
    permissions:
      issues: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîë Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: üìö Show available commands
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const helpText = \`## ü§ñ Gem-CI Bot Commands
            
            Hi @\${context.payload.comment.user.login}! Here are the available slash commands:
            
            ### üîÑ Release Management
            - \\\`/gem-ci revise release minor to patch\\\` - Revise release type
            - \\\`/gem-ci revise release major to minor\\\` - Revise release type  
            - \\\`/gem-ci cancel release\\\` - Cancel current release
            
            ### üí° Other Commands
            - \\\`/gem-ci help\\\` - Show this help message
            
            ### üìù Notes
            - Commands are case-insensitive
            - Version types: \\\`patch\\\`, \\\`minor\\\`, \\\`major\\\`
            - Bot responds with reactions to confirm command processing
            - Use slash commands instead of @ mentions for better practice
            
            ---
            *Powered by gem-ci automation* üöÄ\`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: helpText
            });

  invalid-command:
    name: ‚ùå Handle Invalid Commands
    runs-on: ubuntu-latest
    needs: parse-command
    if: |
      needs.parse-command.outputs.valid_command == 'false' &&
      contains(github.event.comment.body, '/gem-ci')
    permissions:
      issues: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîë Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: ‚ùå Respond to invalid command
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå Sorry @${context.payload.comment.user.login}, I didn't understand that command.\n\nTry \`/gem-ci help\` to see available commands.`
            });
            
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            });