name: 06 - Release Management

on:
  push:
    branches: [ $default-branch ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create a prerelease'
        required: false
        default: false
        type: boolean

env:
  RUBY_VERSION: "3.2"

jobs:
  release-please:
    name: 🎯 Release Please
    runs-on: ubuntu-latest
    if: github.repository_owner != 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr_created: ${{ steps.release.outputs.pr_created }}
    
    steps:
      - name: 🎯 Release Please
        uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: ruby
          package-name: gem-ci
          version-file: lib/gem/ci/version.rb
          changelog-sections: |
            [
              {"type":"feat","section":"🚀 Features","hidden":false},
              {"type":"fix","section":"🐛 Bug Fixes","hidden":false},
              {"type":"security","section":"🔒 Security","hidden":false},
              {"type":"docs","section":"📚 Documentation","hidden":false},
              {"type":"deps","section":"🔧 Dependencies","hidden":false},
              {"type":"refactor","section":"♻️ Refactoring","hidden":false},
              {"type":"test","section":"🧪 Testing","hidden":false},
              {"type":"ci","section":"🤖 CI/CD","hidden":false},
              {"type":"chore","section":"🔧 Maintenance","hidden":true}
            ]
          extra-files: |
            gem-ci.gemspec

  build-gem:
    name: 💎 Build Gem
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    permissions:
      contents: read
    outputs:
      gem_file: ${{ steps.build.outputs.gem_file }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 🔍 Validate gemspec
        run: |
          gem build gem-ci.gemspec --strict --verbose
          echo "Gemspec validation passed!"

      - name: 🏗️ Build gem
        id: build
        run: |
          gem build gem-ci.gemspec
          GEM_FILE=$(ls -1 *.gem | head -n1)
          echo "gem_file=${GEM_FILE}" >> $GITHUB_OUTPUT
          echo "Built gem: ${GEM_FILE}"

      - name: 📦 Upload gem artifact
        uses: actions/upload-artifact@v3
        with:
          name: gem-package
          path: "*.gem"
          retention-days: 30

      - name: 🧪 Test gem installation
        run: |
          GEM_FILE=$(ls -1 *.gem | head -n1)
          gem install "${GEM_FILE}" --local
          echo "Gem installation test passed!"

  security-scan:
    name: 🔒 Release Security Scan
    runs-on: ubuntu-latest
    needs: [release-please, build-gem]
    if: needs.release-please.outputs.release_created == 'true'
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 🔍 Run bundle audit
        run: |
          gem install bundler-audit
          bundle audit check --update

      - name: 🔍 Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'release-security.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 📤 Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'release-security.sarif'

  publish-rubygems:
    name: 💎 Publish to RubyGems
    runs-on: ubuntu-latest
    needs: [release-please, build-gem, security-scan]
    if: needs.release-please.outputs.release_created == 'true'
    permissions:
      contents: read
      id-token: write
    environment: 
      name: rubygems-release
      url: https://rubygems.org/gems/gem-ci
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 📦 Download gem artifact
        uses: actions/download-artifact@v3
        with:
          name: gem-package

      - name: 🔐 Configure RubyGems credentials
        run: |
          mkdir -p ~/.gem
          cat > ~/.gem/credentials << EOF
          ---
          :rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}
          EOF
          chmod 600 ~/.gem/credentials

      - name: 🚀 Publish gem to RubyGems
        run: |
          GEM_FILE=$(ls -1 *.gem | head -n1)
          echo "Publishing ${GEM_FILE} to RubyGems..."
          gem push "${GEM_FILE}"
          echo "✅ Successfully published to RubyGems!"

      - name: 🧹 Cleanup credentials
        if: always()
        run: |
          rm -f ~/.gem/credentials

  github-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release-please, build-gem, publish-rubygems]
    if: needs.release-please.outputs.release_created == 'true'
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Download gem artifact
        uses: actions/download-artifact@v3
        with:
          name: gem-package

      - name: 📝 Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          name: Release ${{ needs.release-please.outputs.version }}
          body: |
            ## 🎉 gem-ci ${{ needs.release-please.outputs.version }}
            
            This release was automatically created by our battle-tested GitHub Actions workflow!
            
            ### 📦 Installation
            ```bash
            gem install gem-ci -v ${{ needs.release-please.outputs.version }}
            ```
            
            ### 🔗 Links
            - [RubyGems.org](https://rubygems.org/gems/gem-ci/${{ needs.release-please.outputs.version }})
            - [Documentation](https://github.com/${{ github.repository }}/tree/${{ needs.release-please.outputs.tag_name }})
            - [Changelog](https://github.com/${{ github.repository }}/blob/${{ needs.release-please.outputs.tag_name }}/CHANGELOG.md)
            
            ### 🚀 What's Changed
            See the [full changelog](https://github.com/${{ github.repository }}/blob/${{ needs.release-please.outputs.tag_name }}/CHANGELOG.md) for details.
            
            ---
            **Built with ❤️ using only battle-tested, high-reliability GitHub Actions**
          files: "*.gem"
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  notify-release:
    name: 📢 Release Notifications
    runs-on: ubuntu-latest
    needs: [release-please, github-release, publish-rubygems]
    if: needs.release-please.outputs.release_created == 'true'
    permissions:
      issues: write
      discussions: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📢 Post release announcement
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.release-please.outputs.version }}';
            const tagName = '${{ needs.release-please.outputs.tag_name }}';
            
            const announcement = `## 🎉 gem-ci ${version} Released!
            
            We're excited to announce the release of gem-ci ${version}! 
            
            ### 🚀 Key Highlights
            - **Automated Release**: Built and published automatically using battle-tested GitHub Actions
            - **Quality Assured**: Passed all security scans and quality gates
            - **Production Ready**: Available on RubyGems.org
            
            ### 📦 Get Started
            \`\`\`bash
            gem install gem-ci -v ${version}
            \`\`\`
            
            ### 🔗 Resources
            - [GitHub Release](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName})
            - [RubyGems.org](https://rubygems.org/gems/gem-ci/${version})
            - [Documentation](https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${tagName})
            
            ### 🙏 Thank You
            Thanks to all contributors who made this release possible!
            
            ---
            *This announcement was automatically generated by our release workflow* 🤖
            `;
            
            // Create a discussion post (if discussions are enabled)
            try {
              await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                org: context.repo.owner,
                team_slug: 'everyone',
                owner: context.repo.owner,
                repo: context.repo.repo,
                permission: 'read'
              });
              console.log('Posted release announcement to discussions');
            } catch (error) {
              console.log('Discussions not available, skipping discussion post');
            }
            
            console.log('Release notification completed');

  release-summary:
    name: 📊 Release Summary
    runs-on: ubuntu-latest
    needs: [release-please, build-gem, security-scan, publish-rubygems, github-release, notify-release]
    if: always()
    permissions:
      actions: write
    
    steps:
      - name: 📊 Generate release summary
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = [
              { name: 'release-please', result: '${{ needs.release-please.result }}' },
              { name: 'build-gem', result: '${{ needs.build-gem.result }}' },
              { name: 'security-scan', result: '${{ needs.security-scan.result }}' },
              { name: 'publish-rubygems', result: '${{ needs.publish-rubygems.result }}' },
              { name: 'github-release', result: '${{ needs.github-release.result }}' },
              { name: 'notify-release', result: '${{ needs.notify-release.result }}' }
            ];
            
            const successful = jobs.filter(job => job.result === 'success').length;
            const skipped = jobs.filter(job => job.result === 'skipped').length;
            const failed = jobs.filter(job => job.result === 'failure').length;
            const total = jobs.length;
            
            const releaseCreated = '${{ needs.release-please.outputs.release_created }}' === 'true';
            const version = '${{ needs.release-please.outputs.version }}';
            
            const summary = `## 🚀 Release Workflow Summary
            
            **Status**: ${failed === 0 ? (releaseCreated ? '✅ RELEASE COMPLETED' : '⏸️ NO RELEASE NEEDED') : '❌ RELEASE FAILED'}
            ${releaseCreated ? `**Version**: ${version}` : ''}
            **Jobs**: ${successful} successful, ${skipped} skipped, ${failed} failed
            
            ### 📋 Job Results
            ${jobs.map(job => {
              const emoji = job.result === 'success' ? '✅' : 
                           job.result === 'failure' ? '❌' : 
                           job.result === 'skipped' ? '⏸️' : '⏳';
              return `- ${emoji} **${job.name}**: ${job.result}`;
            }).join('\n')}
            
            ${releaseCreated ? 
              `### 🎉 Release Complete!
              - ✅ Gem built and validated
              - ✅ Security scans passed
              - ✅ Published to RubyGems.org
              - ✅ GitHub release created
              - ✅ Community notified
              
              **Next Steps:**
              - Monitor release adoption
              - Address any user feedback
              - Plan next development cycle` :
              `### ℹ️ No Release Created
              No release was triggered. This can happen when:
              - No release-worthy changes since last release
              - Release-please is waiting for more commits
              - Manual intervention required
              
              **Next Steps:**
              - Review pending changes
              - Ensure conventional commits are used
              - Check release-please PR status`
            }
            `;
            
            console.log(summary);
            
            // Store release metrics
            if (releaseCreated) {
              await github.rest.actions.setRepoVariable({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'LAST_RELEASE_SUCCESS',
                value: (failed === 0).toString()
              });
            }
