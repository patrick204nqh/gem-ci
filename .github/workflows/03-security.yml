name: 03 - Security

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  RUBY_VERSION: "3.3"
  NODE_VERSION: "20"
  CACHE_VERSION: "v1"
  DEFAULT_TIMEOUT: "300"
  API_RETRY_COUNT: "3"

jobs:
  codeql-analysis:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ruby
          config-file: ./.github/config/codeql.yml

      - name: üíé Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:ruby"

  vulnerability-scan:
    name: üõ°Ô∏è Vulnerability Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: üì§ Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîç Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  secret-scan:
    name: üïµÔ∏è Secret Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  dependency-review:
    name: üì¶ Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          deny-licenses: GPL-2.0, GPL-3.0

  security-summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, vulnerability-scan, secret-scan]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìä Security Scan Summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              filter: 'latest'
            });
            
            const securityChecks = checkRuns.check_runs.filter(check => 
              check.name.includes('Security') || 
              check.name.includes('CodeQL') || 
              check.name.includes('Vulnerability') ||
              check.name.includes('Secret')
            );
            
            const passed = securityChecks.filter(check => check.conclusion === 'success').length;
            const failed = securityChecks.filter(check => check.conclusion === 'failure').length;
            const total = securityChecks.length;
            
            const summary = `## üîí Security Scan Results
            
            **Status**: ${failed === 0 ? '‚úÖ All Clear' : '‚ö†Ô∏è Issues Found'}
            **Passed**: ${passed}/${total} checks
            
            ${failed > 0 ? '‚ö†Ô∏è **Action Required**: Please review the failed security checks above.' : 'üéâ **Great job!** All security scans passed successfully.'}
            `;
            
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
            
            console.log(summary);
