# 📋 Workflow: Core CI Pipeline
# 🎯 Purpose: Run tests, linting, and build gem
# 🔄 Triggers: Push/PR to main/master branches
# 📦 Outputs: Test results, gem artifact
# ⏱️ Duration: ~5-10 minutes
# 🔗 Dependencies: None

name: 02 - CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  CI: true
  COVERAGE: true
  RUBY_VERSION: "3.3"
  NODE_VERSION: "20"
  CACHE_VERSION: "v1"
  DEFAULT_TIMEOUT: "300"
  API_RETRY_COUNT: "3"

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  setup:
    name: "Environment Setup"
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
      
      - name: "🔑 Generate cache key"
        id: cache-key
        run: |
          echo "key=ruby-${{ env.RUBY_VERSION }}-$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: "🔧 Setup Environment"
        uses: ./.github/actions/setup-environment
        with:
          ruby-version: ${{ env.RUBY_VERSION }}

  parallel-jobs:
    name: "Parallel CI Jobs"
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        job: [test, lint, security, docs]
        include:
          - job: test
            name: "Test Suite"
          - job: lint
            name: "Code Quality"
          - job: security
            name: "Security Scan" 
          - job: docs
            name: "Documentation"
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ matrix.job == 'lint' && 0 || 1 }}
      
      - name: "🔧 Setup Environment"
        uses: ./.github/actions/setup-environment
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      
      - name: "🏃 Run ${{ matrix.include[0].name }}"
        uses: ./.github/actions/performance-monitor
        with:
          step-name: ${{ matrix.job }}
          command: |
            case "${{ matrix.job }}" in
              test)
                echo "🧪 Running test suite..."
                bundle exec rspec --format progress --format junit --out tmp/rspec.xml
                ;;
              lint)
                echo "🔍 Running linting..."
                bundle exec rubocop --format github
                bundle exec yard stats --list-undoc
                ;;
              security)
                echo "🔒 Running security scan..."
                gem install bundler-audit
                bundle audit --update
                ;;
              docs)
                echo "📚 Checking documentation..."
                bundle exec yard check
                ;;
            esac

  test:
    name: "Test Ruby ${{ matrix.ruby }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        ruby: ['3.2', '3.3', '3.4']
        os: [ubuntu-latest, macos-latest]
        
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "🔧 Setup Environment"
        uses: ./.github/actions/setup-environment
        with:
          ruby-version: ${{ matrix.ruby }}
          enable-bundler-cache: 'true'
          
      - name: "🔧 Cache Dependencies"
        uses: actions/cache@v4
        with:
          path: |
            vendor/bundle
            ~/.gem
          key: ${{ runner.os }}-ruby-${{ matrix.ruby }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby-${{ matrix.ruby }}-gems-
            
      - name: "📦 Install Dependencies"
        run: |
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3
          
      - name: "Run Tests"
        run: bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/rspec.xml
        
      - name: "Upload Test Results"
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: "RSpec Tests - Ruby ${{ matrix.ruby }} (${{ matrix.os }})"
          path: tmp/rspec.xml
          reporter: java-junit
          
      - name: "Upload Coverage"
        uses: codecov/codecov-action@v3
        if: matrix.ruby == '3.3' && matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage/coverage.xml
          fail_ci_if_error: false
          verbose: true


  build:
    name: "Build Gem"
    runs-on: ubuntu-latest
    needs: [test, parallel-jobs]
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "💎 Setup Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          
      - name: "Build Gem"
        run: |
          gem build *.gemspec
          ls -la *.gem
          
      - name: "📦 Upload Gem Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: gem-ci-${{ github.sha }}
          path: "*.gem"
          retention-days: 30

  summary:
    name: "📈 CI Summary & Performance"
    runs-on: ubuntu-latest
    needs: [setup, test, parallel-jobs, build]
    if: always()
    
    steps:
      - name: "📋 Create Summary"
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            const setupResult = needs.setup.result;
            const testResult = needs.test.result;
            const parallelResult = needs['parallel-jobs'].result;
            const buildResult = needs.build.result;
            
            let summary = '## 📈 CI Pipeline Summary & Performance\n\n';
            
            // Job Status Table
            summary += `### 📋 Job Status\n\n`;
            summary += `| Job | Status |\n`;
            summary += `|-----|--------|\n`;
            summary += `| Setup | ${setupResult === 'success' ? '✅ Passed' : '❌ Failed'} |\n`;
            summary += `| Tests | ${testResult === 'success' ? '✅ Passed' : '❌ Failed'} |\n`;
            summary += `| Parallel Jobs | ${parallelResult === 'success' ? '✅ Passed' : '❌ Failed'} |\n`;
            summary += `| Build | ${buildResult === 'success' ? '✅ Passed' : '❌ Failed'} |\n\n`;
            
            // Performance Summary
            const workflowStart = new Date('${{ github.event.head_commit.timestamp || github.event.created_at }}');
            const workflowEnd = new Date();
            const totalDuration = Math.round((workflowEnd - workflowStart) / 1000);
            
            summary += `### ⏱️ Performance Metrics\n\n`;
            summary += `| Metric | Value |\n`;
            summary += `|--------|-------|\n`;
            summary += `| Total Duration | ${totalDuration}s |\n`;
            summary += `| Parallel Efficiency | High 🚀 |\n`;
            summary += `| Success Rate | ${[setupResult, testResult, parallelResult, buildResult].filter(r => r === 'success').length}/4 |\n\n`;
            
            if (totalDuration > 600) {
              summary += `🔴 **Performance Alert**: Workflow exceeded 10 minutes\n\n`;
            } else if (totalDuration > 300) {
              summary += `🟡 **Performance Note**: Workflow took ${Math.round(totalDuration/60)} minutes\n\n`;
            } else {
              summary += `✅ **Performance Good**: Workflow completed efficiently\n\n`;
            }
            
            if (testResult === 'success' && lintResult === 'success' && buildResult === 'success') {
              summary += '🎉 **All checks passed!** Ready for review and merge.\n';
            } else {
              summary += '⚠️ **Some checks failed.** Please review the logs and fix any issues.\n';
            }
            
            console.log(summary);
