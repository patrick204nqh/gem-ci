# 📋 Workflow: Code Quality & Analysis
# 🎯 Purpose: Code linting, RuboCop analysis, documentation generation
# 🔄 Triggers: Push/PR to main/master branches
# 📦 Outputs: Quality reports, documentation, complexity analysis
# ⏱️ Duration: ~6-12 minutes
# 🔗 Dependencies: GitHub App authentication

name: 04 - Quality

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  RUBY_VERSION: "3.3"
  NODE_VERSION: "20"
  CACHE_VERSION: "v1"
  DEFAULT_TIMEOUT: "300"
  API_RETRY_COUNT: "3"

jobs:
  linting:
    name: 🔍 Code Linting
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔑 Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 🔍 Non-Ruby Code Linting
        run: |
          echo "🔍 Running non-Ruby linting checks..."
          
          # YAML validation
          echo "📄 YAML files:"
          find . -name "*.yml" -o -name "*.yaml" | grep -v vendor | head -10 | while read file; do
            echo "  Checking: $file"
            ruby -e "require 'yaml'; YAML.load_file('$file')" 2>/dev/null && echo "    ✅ Valid" || echo "    ❌ Invalid"
          done
          
          # JSON validation
          echo "📋 JSON files:"
          find . -name "*.json" | grep -v vendor | head -5 | while read file; do
            echo "  Checking: $file"
            ruby -e "require 'json'; JSON.parse(File.read('$file'))" 2>/dev/null && echo "    ✅ Valid" || echo "    ❌ Invalid"
          done
          
          # Markdown basic check
          echo "📝 Markdown files:"
          find . -name "*.md" | grep -v vendor | head -5 | while read file; do
            echo "  Checking: $file"
            [ -f "$file" ] && echo "    ✅ Exists" || echo "    ❌ Missing"
          done
          
          echo "✅ Non-Ruby linting complete"

  rubocop:
    name: 💎 RuboCop Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔑 Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 🔍 Run RuboCop
        run: |
          bundle exec rubocop --format github --format json --out rubocop-results.json
        continue-on-error: true

      - name: 📊 Store RuboCop Results  
        run: |
          # Store results for consolidated report
          mkdir -p /tmp/quality-reports
          if [ -f rubocop-results.json ]; then
            cp rubocop-results.json /tmp/quality-reports/
          else
            echo '{"files":[],"summary":{"inspected_file_count":0,"offense_count":0,"target_ruby_version":"3.3"}}' > /tmp/quality-reports/rubocop-results.json
          fi
          
      - name: 📤 Upload RuboCop Results
        uses: actions/upload-artifact@v4
        with:
          name: rubocop-results
          path: /tmp/quality-reports/rubocop-results.json
          retention-days: 1

  documentation:
    name: 📚 Documentation Generation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔑 Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 📚 Generate YARD documentation
        run: |
          bundle exec yard doc --output-dir docs/_site

      - name: 📤 Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_site/
          retention-days: 30

      - name: 🚀 Deploy to GitHub Pages
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ steps.app_token.outputs.token }}
          publish_dir: ./docs/_site
          destination_dir: .
          keep_files: false
          commit_message: '📚 Deploy documentation [skip ci]'

  complexity-analysis:
    name: 📊 Code Complexity Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔑 Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 📊 Analyze code complexity
        run: |
          # Install flog for complexity analysis
          gem install flog
          
          # Run complexity analysis
          echo "## 📊 Code Complexity Analysis" > complexity-report.md
          echo "" >> complexity-report.md
          
          if find . -name "*.rb" -not -path "./vendor/*" | head -1 | read; then
            echo "### 🎯 Complexity Scores (Lower is Better)" >> complexity-report.md
            echo "" >> complexity-report.md
            flog lib/ | head -20 >> complexity-report.md || echo "No complexity issues found!" >> complexity-report.md
            echo "" >> complexity-report.md
            echo "**Note**: Flog scores above 40 indicate high complexity that may need refactoring." >> complexity-report.md
          else
            echo "No Ruby files found for analysis." >> complexity-report.md
          fi

      - name: 📤 Upload Complexity Results
        uses: actions/upload-artifact@v4
        with:
          name: complexity-results
          path: complexity-report.md
          retention-days: 1

  quality-summary:
    name: 📋 Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [linting, rubocop, documentation, complexity-analysis]
    if: always()
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📢 Notify Quality Gate Status
        uses: ./.github/actions/notification
        with:
          message: "Quality Gate completed for ${{ github.ref_name }}"
          status: ${{ needs.linting.result == 'success' && needs.rubocop.result == 'success' && needs.documentation.result == 'success' && needs.complexity-analysis.result == 'success' && 'success' || 'failure' }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: 🔑 Generate GitHub App Token
        id: app_token
        uses: ./.github/actions/github-app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 📥 Download Quality Reports
        uses: actions/download-artifact@v4
        with:
          name: rubocop-results
          path: ./reports/
        continue-on-error: true
        
      - name: 📥 Download Complexity Report  
        uses: actions/download-artifact@v4
        with:
          name: complexity-results
          path: ./reports/
        continue-on-error: true

      - name: 📊 Update PR Status
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/update-pr-status
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          workflow-name: "Quality Gate"
          status: ${{ (needs.linting.result == 'success' && needs.rubocop.result == 'success' && needs.documentation.result == 'success' && needs.complexity-analysis.result == 'success') && 'success' || 'failure' }}
          summary: ${{ (needs.linting.result == 'success' && needs.rubocop.result == 'success' && needs.documentation.result == 'success' && needs.complexity-analysis.result == 'success') && 'All quality checks passed (4/4)' || 'Some quality checks failed' }}

      - name: 📊 Quality Gate Results (Internal)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const jobs = [
              { name: 'linting', result: '${{ needs.linting.result }}' },
              { name: 'rubocop', result: '${{ needs.rubocop.result }}' },
              { name: 'documentation', result: '${{ needs.documentation.result }}' },
              { name: 'complexity-analysis', result: '${{ needs.complexity-analysis.result }}' }
            ];
            
            const passed = jobs.filter(job => job.result === 'success').length;
            const failed = jobs.filter(job => job.result === 'failure').length;
            const total = jobs.length;
            const qualityGatePassed = failed === 0;
            
            console.log(`Quality Gate Results: ${passed}/${total} checks passed`);
            jobs.forEach(job => {
              console.log(`- ${job.name}: ${job.result}`);
            });
            
            // Set output for other workflows
            core.setOutput('quality-gate-passed', qualityGatePassed);
            core.setOutput('quality-score', `${passed}/${total}`);
