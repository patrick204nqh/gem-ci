# üß™ Validation Workflows
# This folder contains validation workflows that test gem-ci setup and functionality
# These are separate from production workflows (01-08) that get copied by the CLI tool

name: "üè∑Ô∏è Validate Labels Synchronization"
on:
  workflow_dispatch:

jobs:
  validate-labels:
    runs-on: ubuntu-latest
    steps:
      - name: "üîÑ Checkout Repository"
        uses: actions/checkout@v4
      
      - name: "üîë Generate GitHub App Token"
        id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GEM_CI_APP_ID }}
          private-key: ${{ secrets.GEM_CI_PRIVATE_KEY }}
      
      - name: "üîç Validate Labels Configuration File"
        run: |
          echo "üß™ Checking for labels configuration..."
          
          if [ -f ".github/labels.yml" ]; then
            echo "‚úÖ Found labels.yml configuration"
            echo "üìÑ File size: $(wc -c < .github/labels.yml) bytes"
            echo "üìã Label count: $(yq eval '. | length' .github/labels.yml)"
          elif [ -f ".github/config/labels.json" ]; then
            echo "‚úÖ Found labels.json configuration"
            echo "üìÑ File size: $(wc -c < .github/config/labels.json) bytes"
            echo "üìã Label count: $(jq '. | length' .github/config/labels.json)"
          else
            echo "‚ùå No labels configuration found!"
            echo "üí° Expected: .github/labels.yml (preferred) or .github/config/labels.json"
            exit 1
          fi
      
      - name: "üìã Parse and Validate Label Structure"
        run: |
          echo "üß™ Validating label structure..."
          
          if [ -f ".github/labels.yml" ]; then
            # Validate YAML structure
            if yq eval '.' .github/labels.yml > /dev/null 2>&1; then
              echo "‚úÖ Valid YAML syntax"
            else
              echo "‚ùå Invalid YAML syntax"
              exit 1
            fi
            
            # Check required fields
            required_fields=("name" "color" "description")
            for field in "${required_fields[@]}"; do
              if yq eval ".[0] | has(\"$field\")" .github/labels.yml > /dev/null 2>&1; then
                echo "‚úÖ Required field '$field' present"
              else
                echo "‚ùå Missing required field: $field"
                exit 1
              fi
            done
            
            # Show sample labels
            echo "üìã Sample labels:"
            yq eval '.[] | "  üè∑Ô∏è  " + .name + " (" + .color + ") - " + .description' .github/labels.yml | head -5
            
          elif [ -f ".github/config/labels.json" ]; then
            # Validate JSON structure
            if jq empty .github/config/labels.json; then
              echo "‚úÖ Valid JSON syntax"
            else
              echo "‚ùå Invalid JSON syntax"
              exit 1
            fi
            
            # Check required fields
            required_fields=("name" "color" "description")
            for field in "${required_fields[@]}"; do
              if jq -e ".[0] | has(\"$field\")" .github/config/labels.json > /dev/null; then
                echo "‚úÖ Required field '$field' present"
              else
                echo "‚ùå Missing required field: $field"
                exit 1
              fi
            done
            
            # Show sample labels
            echo "üìã Sample labels:"
            jq -r '.[] | "  üè∑Ô∏è  \(.name) (\(.color)) - \(.description)"' .github/config/labels.json | head -5
          fi
      
      - name: "üé® Validate Label Colors"
        run: |
          echo "üß™ Validating label color scheme..."
          
          if [ -f ".github/labels.yml" ]; then
            # Check for valid hex colors
            invalid_colors=$(yq eval '.[] | select(.color | test("^[0-9a-fA-F]{6}$") | not) | .name + ": " + .color' .github/labels.yml)
            
            if [ -z "$invalid_colors" ]; then
              echo "‚úÖ All colors use valid 6-digit hex format"
            else
              echo "‚ùå Invalid color formats found:"
              echo "$invalid_colors"
              exit 1
            fi
            
            # Check for accessibility concerns
            echo "üîç Checking color accessibility..."
            
            # Check for problematic colors (too light/dark)
            light_colors=$(yq eval '.[] | select(.color as $c | ($c | ascii_downcase) | test("^(ffffff|f{5,6}|e{5,6})")) | .name + ": #" + .color' .github/labels.yml)
            very_dark_colors=$(yq eval '.[] | select(.color as $c | ($c | ascii_downcase) | test("^(000000|0{5,6}|1{5,6})")) | .name + ": #" + .color' .github/labels.yml)
            
            if [ -n "$light_colors" ]; then
              echo "‚ö†Ô∏è Very light colors (may have contrast issues):"
              echo "$light_colors"
            fi
            
            if [ -n "$very_dark_colors" ]; then
              echo "‚ö†Ô∏è Very dark colors (may have contrast issues):"
              echo "$very_dark_colors"
            fi
            
            # Check for color consistency in groups
            echo "üé® Checking color group consistency..."
            
            # Priority colors should be distinct
            priority_colors=$(yq eval '.[] | select(.name | startswith("priority:")) | .name + ": #" + .color' .github/labels.yml)
            echo "üè∑Ô∏è Priority label colors:"
            echo "$priority_colors"
            
            # Ruby version colors should be related
            ruby_colors=$(yq eval '.[] | select(.name | startswith("ruby:")) | .name + ": #" + .color' .github/labels.yml)
            echo "üíé Ruby version colors:"
            echo "$ruby_colors"
            
            # Platform colors should be distinct
            platform_colors=$(yq eval '.[] | select(.name | startswith("platform:")) | .name + ": #" + .color' .github/labels.yml)
            echo "üñ•Ô∏è Platform colors:"
            echo "$platform_colors"
            
            echo "‚úÖ Color validation completed"
            
          elif [ -f ".github/config/labels.json" ]; then
            # Check for valid hex colors (JSON format)
            invalid_colors=$(jq -r '.[] | select(.color | test("^[0-9a-fA-F]{6}$") | not) | .name + ": " + .color' .github/config/labels.json)
            
            if [ -z "$invalid_colors" ]; then
              echo "‚úÖ All colors use valid 6-digit hex format"
            else
              echo "‚ùå Invalid color formats found:"
              echo "$invalid_colors"
              exit 1
            fi
            
            # Check for accessibility concerns
            echo "üîç Checking color accessibility..."
            
            # Check for problematic colors (too light/dark)
            light_colors=$(jq -r '.[] | select(.color as $c | ($c | ascii_downcase) | test("^(ffffff|f{5,6}|e{5,6})")) | .name + ": #" + .color' .github/config/labels.json)
            very_dark_colors=$(jq -r '.[] | select(.color as $c | ($c | ascii_downcase) | test("^(000000|0{5,6}|1{5,6})")) | .name + ": #" + .color' .github/config/labels.json)
            
            if [ -n "$light_colors" ]; then
              echo "‚ö†Ô∏è Very light colors (may have contrast issues):"
              echo "$light_colors"
            fi
            
            if [ -n "$very_dark_colors" ]; then
              echo "‚ö†Ô∏è Very dark colors (may have contrast issues):"
              echo "$very_dark_colors"
            fi
            
            # Check for color consistency in groups
            echo "üé® Checking color group consistency..."
            
            # Priority colors should be distinct
            priority_colors=$(jq -r '.[] | select(.name | startswith("priority:")) | .name + ": #" + .color' .github/config/labels.json)
            echo "üè∑Ô∏è Priority label colors:"
            echo "$priority_colors"
            
            # Ruby version colors should be related
            ruby_colors=$(jq -r '.[] | select(.name | startswith("ruby:")) | .name + ": #" + .color' .github/config/labels.json)
            echo "üíé Ruby version colors:"
            echo "$ruby_colors"
            
            # Platform colors should be distinct
            platform_colors=$(jq -r '.[] | select(.name | startswith("platform:")) | .name + ": #" + .color' .github/config/labels.json)
            echo "üñ•Ô∏è Platform colors:"
            echo "$platform_colors"
            
            echo "‚úÖ Color validation completed"
          fi
      
      - name: "üîÑ Test Labels Synchronization (Dry Run)"
        uses: crazy-max/ghaction-github-labeler@v5
        with:
          yaml-file: .github/labels.yml
          dry-run: true
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
      
      - name: "üè∑Ô∏è Fetch Current Repository Labels"
        run: |
          echo "üß™ Fetching current repository labels..."
          
          current_labels=$(curl -s \
            -H "Authorization: token ${{ steps.app_token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/labels")
          
          label_count=$(echo "$current_labels" | jq '. | length')
          echo "üìä Current labels in repository: $label_count"
          
          echo "üè∑Ô∏è Current labels:"
          echo "$current_labels" | jq -r '.[] | "  \(.name) (\(.color)) - \(.description // "No description")"' | head -10
          
          if [ "$label_count" -gt 50 ]; then
            echo "‚ö†Ô∏è Warning: Repository has many labels ($label_count). Consider cleanup."
          fi
      
      - name: "ÔøΩÔøΩ Check for Standard Open Source Labels"
        run: |
          echo "üß™ Checking for standard open source labels..."
          
          # Define expected standard labels for open source projects
          expected_labels=(
            "bug"
            "enhancement" 
            "documentation"
            "good first issue"
            "help wanted"
            "dependencies"
            "security"
            "ci/cd"
            "breaking change"
            "needs review"
            "priority: high"
            "priority: medium"
            "priority: low"
            "type: feature"
            "type: bugfix"
          )
          
          current_labels=$(curl -s \
            -H "Authorization: token ${{ steps.app_token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/labels" | jq -r '.[].name')
          
          missing_labels=()
          for label in "${expected_labels[@]}"; do
            if echo "$current_labels" | grep -qi "^$label$"; then
              echo "‚úÖ Found: $label"
            else
              echo "‚ùå Missing: $label"
              missing_labels+=("$label")
            fi
          done
          
          if [ ${#missing_labels[@]} -eq 0 ]; then
            echo "üéâ All standard open source labels are present!"
          else
            echo "‚ö†Ô∏è Missing ${#missing_labels[@]} standard labels"
            echo "üí° Consider adding these to your labels configuration"
          fi
      
      - name: "‚úÖ Labels Validation Complete"
        run: |
          echo "üéâ Labels synchronization validation completed!"
          echo "üìã Summary:"
          echo "  ‚úÖ Configuration file: Valid"
          echo "  üé® Color scheme: Validated"
          echo "  üîÑ Sync mechanism: Working"
          echo "  üè∑Ô∏è Current labels: Fetched"
          echo "  üìä Standard labels: Checked"
          echo ""
          echo "üí° Next steps:"
          echo "  1. Review missing standard labels"
          echo "  2. Update .github/labels.yml if needed"
          echo "  3. Check color accessibility with .github/config/LABELS_COLOR_GUIDE.md"
          echo "  4. Run actual sync in production workflow"
          echo "  5. Test auto-labeling functionality" 